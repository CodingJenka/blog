<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on a tech.stuff blog</title>
    <link>https://jenkawitzig.github.io/blog/posts/</link>
    <description>Recent content in Posts on a tech.stuff blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Oct 2023 20:58:54 +0200</lastBuildDate><atom:link href="https://jenkawitzig.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC -- Makes Google remote procedure calls (finally) cool? </title>
      <link>https://jenkawitzig.github.io/blog/posts/grpc/</link>
      <pubDate>Sat, 21 Oct 2023 20:58:54 +0200</pubDate>
      
      <guid>https://jenkawitzig.github.io/blog/posts/grpc/</guid>
      <description>Intro Those who thought Remote Procedure Calls (RPC) were an old shoe have been taught better with the offshoot `gRPC developed by Google. I was introduced to RPC on and off with appalling regularity at university. Primarily at that time as CORBA. In some projects of my past working life I also came across old SOAP APIs from time to time. Neither of them made me love RPC very much. So now gRPC as the newest child of the RPC family is vying for our favor.</description>
    </item>
    
    <item>
      <title>APIs -- an overview</title>
      <link>https://jenkawitzig.github.io/blog/posts/apicomparison/</link>
      <pubDate>Fri, 20 Oct 2023 20:58:54 +0200</pubDate>
      
      <guid>https://jenkawitzig.github.io/blog/posts/apicomparison/</guid>
      <description>Blubb</description>
    </item>
    
    <item>
      <title>graphQL</title>
      <link>https://jenkawitzig.github.io/blog/posts/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkawitzig.github.io/blog/posts/graphql/</guid>
      <description>Intro Idea Is a language for interaction with graph based data models, tunneled via HTTP-Post. Allows to query and change (mutate) data.
Allows an recursive selection of desired nodes and properties.
As a client i am able to tell exactly what i expect. There are some standards for navigation through a huge result sets via pagination. It offers a subscription functionality for recognize changes. Also a lot of tools are available for different functionalities for the client as well as for the server side.</description>
    </item>
    
  </channel>
</rss>
