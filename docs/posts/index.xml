<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on a tech.stuff blog</title>
    <link>https://codingjenka.github.io/blog/posts/</link>
    <description>Recent content in Posts on a tech.stuff blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Nov 2023 20:58:54 +0200</lastBuildDate><atom:link href="https://codingjenka.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReST APIs -- and hypermedia as the engine of application state  </title>
      <link>https://codingjenka.github.io/blog/posts/apis/rest/</link>
      <pubDate>Thu, 09 Nov 2023 20:58:54 +0200</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/apis/rest/</guid>
      <description>Intro Link to heading After we know HTTP is a application protocol we can dive into ReST, short for Represential State Transfer.
Idea Link to heading First of all: ReST is nothing physical. It doesn&amp;rsquo;t exist as &amp;lsquo;anything&amp;rsquo;. It&amp;rsquo;s an abstraction of the web. It uses its core principles and behaviour to create a universal communication architecture.
ReSTs standalone feature Link to heading Since HTTP as a web protocol implements many of these principles, it is a convenient tool for creating a ReST API However, HTTP alone does not make an API ReSTful.</description>
    </item>
    
    <item>
      <title>The software architect. This unknown suspekt.</title>
      <link>https://codingjenka.github.io/blog/posts/architecture_designprozess/architecture/</link>
      <pubDate>Sun, 05 Nov 2023 09:00:11 +0100</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/architecture_designprozess/architecture/</guid>
      <description>The architect who is not only a developer. Link to heading Recently, a CTO person said to me, after I told him, my passion is software architecture:
But every developer should know about architecture, it&amp;rsquo;s not something that needs to be done extra&amp;hellip;&amp;rsquo;&#39;.
Dear product managers, dear CTOs: Yes, unfortunately software architecture is something that has to be done extra.
Software architecture goes beyond OOP. It is not something you do once and then never touch again.</description>
    </item>
    
    <item>
      <title>HTTP -- this thing what you think is ReST  </title>
      <link>https://codingjenka.github.io/blog/posts/apis/http/</link>
      <pubDate>Sat, 10 Jun 2023 20:58:54 +0200</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/apis/http/</guid>
      <description>Intro Link to heading I often read in applications that the candidates know ReST. When they are asked what the quintessence of ReST is and how it differs from HTTP, i rarely get a satisfactory answer. Therefore, let&amp;rsquo;s first have a look at HTTP a.k.a. what most developers understand by a ReST API.
Idea Link to heading The base idea behind HTTP is that we use the magic that the web provides us with free of charge.</description>
    </item>
    
    <item>
      <title>gRPC -- Makes Google remote procedure calls (finally) cool? </title>
      <link>https://codingjenka.github.io/blog/posts/apis/grpc/</link>
      <pubDate>Fri, 10 Mar 2023 20:58:54 +0200</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/apis/grpc/</guid>
      <description>Intro Link to heading Those who thought Remote Procedure Calls (RPC) were an old shoe have been taught better with the offshoot `gRPC developed by Google. I was introduced to RPC on and off with appalling regularity at university. Primarily at that time as CORBA. In some projects of my past working life I also came across old SOAP APIs from time to time. Neither of them made me love RPC very much.</description>
    </item>
    
    <item>
      <title>APIs -- an overview</title>
      <link>https://codingjenka.github.io/blog/posts/apis/apicomparison/</link>
      <pubDate>Fri, 10 Mar 2023 10:58:54 +0200</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/apis/apicomparison/</guid>
      <description>This will be a series of the most used API styles:
gRPC, HttP ReST graphQL </description>
    </item>
    
    <item>
      <title></title>
      <link>https://codingjenka.github.io/blog/posts/pluralsight/modern_software_architecture/ddd/modernsoftwarearchitecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://codingjenka.github.io/blog/posts/pluralsight/modern_software_architecture/ddd/modernsoftwarearchitecture/</guid>
      <description>Discovering the domain architecture through DDD Link to heading Ubiquitous language Link to heading = shared glossary of terms that stakeholders use in all spoken and written communication
avoiding miss-understanding vocabulary understand by all parties of the project Sync: Changes of languages leads to changes in the code looking for nouns and verbs in the user story written in official natural language of the project make sure, that in a field of lot domain logic everything is covered use, when business logic is not defined in total Bounded Contextes Link to heading delimited space where all elements of the ubiq.</description>
    </item>
    
  </channel>
</rss>
